import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# Load preprocessed data
file_path = r'C:\Users\ISynesius\Py Projects\Preprocessed_Data.xlsx'
data = pd.read_excel(file_path)
print(f"Loading preprocessed data from: {file_path}")

# Feature selection
features = ['temperature', 'day', 'day_of_week', 'week_of_year', 'month', 'year']
X = data[features]
y = data['volume']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(random_state=42)
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Save the best model
best_model = grid_search.best_estimator_
model_path = r'C:\Users\ISynesius\Py Projects\trained_model.pkl'
joblib.dump(best_model, model_path)
print(f"Best model saved to {model_path}")

# Model evaluation
y_pred = best_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")
